# fill = Count
)) +
geom_polygon() +
# coord_fixed(xlim = c(-15,40),
#             ylim = c(35, 65))+
# scale_fill_distiller(palette = "Blues", direction = 1) +
# scale_fill_gradientn(colours = myPal,
#                     trans = "log", breaks = c(0.1,1,7),
#                     name = "Players Per Million") +
scale_fill_viridis(option = "viridis",
breaks = c(0.001, 0.1, 10),
trans = scales::pseudo_log_trans(sigma = 0.001),
name = paste0("Players Per",
"\n",
"10M Pop"),
labels = scales::scientific)+
ggtitle("Where Are Footballers in the Top 5 Leagues From?",
# subtitle = "\n"
) +
theme(
plot.background = element_rect(fill  = "#EFEFEF"),
panel.background = element_rect(fill  = "#EFEFEF"),
# legend.position = c(0.177,1.03),
# legend.direction = "horizontal",
# legend.margin = margin(0),
legend.background = element_rect(fill  = "#EFEFEF"),
# legend.position = "bottom",
panel.grid = element_blank(),
# panel.background = element_rect(fill  = lighten("#757780",0.8)),
axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_blank()
)
world_gg_log
world_plotly_log <- ggplotly(world_gg_log, tooltip = "text")
world_plotly_log
View(popData)
View(bordersNats)
View(popData)
knitr::opts_chunk$set(echo = TRUE)
#Clear memory
rm(list = ls(all = TRUE))
#Load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse,     # data management and visualization
showtext,      # help with downloaded fonts
systemfonts,   # use downloaded fonts
eurostat,      # get list of european countries
here,          # relative file pathways
RColorBrewer,  # effective color palettes
rayshader,     # 3d plots
colorspace,    # fancy work with colors like darken and lighten
countrycode,   # iso codes and country names
viridis,       # better map colors
plotly,        # interactive plots
worldfootballR # football statistics
)
#Download basic player-level stats from FbRef for 2020-21 to 2022-23 seasons
footballers <- fb_big5_advanced_season_stats(season_end_year= 2023, stat_type= "standard", team_or_player= "player")
#Load coutnry abbreviations matched to names so we can get full names
fifaCodes <- read.csv(here("Europe_Borders/Fifa_Country_Codes.csv"))
# #Load world population data driectly into R
# popData <- world_bank_pop %>%
#   mutate(Nation = countrycode(country, origin = "iso3c", destination="country.name.en")) %>% #Get country name from code
#   filter(indicator == "SP.POP.TOTL") %>% #Take only total population
#   select("Pop" = "2017", #Take most recent year available
#          "Nation") %>%
#   #Make some names match the names in the other datasets
#   mutate(Nation = case_when(
#     Nation == "United Kingdom" ~ "UK",
#     Nation == "United States" ~ "USA",
#     Nation == "Bosnia & Herzegovina" ~ "Bosnia and Herzegovina",
#     Nation == "Ivory Coast" ~  "Côte d’Ivoire",
#     Nation == "Czechia" ~ "Czech Republic",
#     Nation == "Myanmar (Burma)" ~ "Myanmar",
#     Nation == "Ireland" ~ "Republic of Ireland",
#     # Nation == "French Guiana" ~ "" #French guiana and DRC appear missing from pop data
#     TRUE ~ Nation
#     )
#   )
#Load downloaded world population data (https://databank.worldbank.org/source/population-estimates-and-projections)
popData <- read.csv(here("Europe_Borders/WB_Population_2022.csv")) %>%
rename( "Nation" = "Country.Name") %>%
#Make some names match the names in the other datasets
mutate(Nation = case_when(
Nation == "United Kingdom" ~ "UK",
Nation == "United States" ~ "USA",
Nation == "Bosnia & Herzegovina" ~ "Bosnia and Herzegovina",
Nation == "Cote d'Ivoire" ~  "Côte d’Ivoire",
Nation == "Czechia" ~ "Czech Republic",
Nation == "Ireland" ~ "Republic of Ireland",
Nation == "Congo, Dem. Rep." ~ "Democratic Republic of the Congo",
Nation == "Congo, Rep." ~ "Republic of Congo",
Nation == "Russian Federation" ~ "Russia",
Nation == "Yemen, Rep." ~ "Yemen",
Nation == "Egypt, Arab Rep." ~ "Egypt",
Nation == "Syrian Arab Republic" ~ "Syria",
Nation == "Turkiye" ~ "Turkey",
Nation == "Iran, Islamic Rep." ~ "Iran",
Nation == "Venezuela, RB" ~ "Venezuela",
Nation == "Slovak Republic" ~ "Slovakia",
Nation == "Kyrgyz Republic" ~ "Kyrgyzstan",
Nation == "Korea, Dem. People's Rep." ~ "North Korea",
Nation == "Korea, Rep." ~ "South Korea",
Nation == "Lao PDR" ~ "Laos",
TRUE ~ Nation
)
)
#Load country polygons
borders <- map_data("world") %>%
rename(Nation = region) %>%
mutate(Nation = case_when(
Nation == "Ireland" ~ "Republic of Ireland",
Nation == "Ivory Coast" ~  "Côte d’Ivoire",
TRUE ~ Nation
)
)
myPal <- brewer.pal("GnBu", n=9)
footballersNats <- footballers %>%
mutate(Nation = case_when(
Nation %in% c("ENG", "SCO","NIR", "WAL") ~ "UK",
TRUE ~ Nation
)
) %>%
group_by(Nation) %>%
summarise(Count = n()) %>%
#Give full country names
rename(Nation_Code = Nation) %>%
left_join(fifaCodes, by="Nation_Code") %>%
mutate(Nation = case_when(
Nation_Code == "UK" ~ "UK",
TRUE ~ Nation
)
)
bordersNats <- borders$Nation %>% unique() %>% as.data.frame()
tmp2 <- footballers$Nation %>%
unique() %>%
as.data.frame()
#Get number of players by nationality
natData <- footballers %>%
mutate(Nation = case_when(
Nation %in% c("ENG", "SCO","NIR", "WAL") ~ "UK",
TRUE ~ Nation
)
) %>%
group_by(Nation) %>%
summarise(Count = n()) %>%
#Give full country names
rename(Nation_Code = Nation) %>%
left_join(fifaCodes, by="Nation_Code") %>%
mutate(Nation = case_when(
Nation_Code == "UK" ~ "UK",
Nation_Code == "COD" ~ "Democratic Republic of the Congo",
Nation_Code == "CGO" ~ "Republic of Congo",
TRUE ~ Nation
)
) %>%
full_join(borders, by = "Nation") %>%
left_join(popData, by = "Nation") %>%
filter(Nation != "Antarctica")
#Replace NA player count with 0
natData$Count[is.na(natData$Count)] <- 0
natData <- natData %>%
mutate(CountPer10M =  Count/Pop*10000000)
natDataNats <- natData$Nation %>%
unique() %>%
as.data.frame()
#Plot ggplot of just europe
europe_gg <- ggplot(natData, aes(x=long, y=lat, group = group, fill = Count)) +
geom_polygon() +
coord_fixed(xlim = c(-15,25),
ylim = c(35, 65))+
scale_fill_distiller(palette = "Blues", direction = 1) +
theme(
plot.background = element_rect(fill  = "white"),
panel.grid = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
# axis.text = element_blank()
)
europe_gg
#PLot with log scale
world_gg_log <- natData %>%
ggplot(aes(x=long, y=lat, group = group,
text = paste0('Country: ', Nation,
'<br>', 'Players Per 10 Million People: ', round(CountPer10M,2)),
# fill = Count/Pop*1000000+(0.01/1000000)
fill = CountPer10M
# fill = Count
)) +
geom_polygon() +
# coord_fixed(xlim = c(-15,40),
#             ylim = c(35, 65))+
# scale_fill_distiller(palette = "Blues", direction = 1) +
# scale_fill_gradientn(colours = myPal,
#                     trans = "log", breaks = c(0.1,1,7),
#                     name = "Players Per Million") +
scale_fill_viridis(option = "viridis",
breaks = c(0.001, 0.1, 10),
trans = scales::pseudo_log_trans(sigma = 0.001),
name = paste0("Players Per",
"\n",
"10M Pop"),
labels = scales::scientific)+
ggtitle("Where Are Footballers in the Top 5 Leagues From?",
# subtitle = "\n"
) +
theme(
plot.background = element_rect(fill  = "#EFEFEF"),
panel.background = element_rect(fill  = "#EFEFEF"),
# legend.position = c(0.177,1.03),
# legend.direction = "horizontal",
# legend.margin = margin(0),
legend.background = element_rect(fill  = "#EFEFEF"),
# legend.position = "bottom",
panel.grid = element_blank(),
# panel.background = element_rect(fill  = lighten("#757780",0.8)),
axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_blank()
)
world_gg_log
world_plotly_log <- ggplotly(world_gg_log, tooltip = "text")
world_plotly_log
View(bordersNats)
View(footballersNats)
View(footballersNats)
knitr::opts_chunk$set(echo = TRUE)
#Clear memory
rm(list = ls(all = TRUE))
#Load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse,     # data management and visualization
showtext,      # help with downloaded fonts
systemfonts,   # use downloaded fonts
eurostat,      # get list of european countries
here,          # relative file pathways
RColorBrewer,  # effective color palettes
rayshader,     # 3d plots
colorspace,    # fancy work with colors like darken and lighten
countrycode,   # iso codes and country names
viridis,       # better map colors
plotly,        # interactive plots
worldfootballR # football statistics
)
#Download basic player-level stats from FbRef for 2020-21 to 2022-23 seasons
footballers <- fb_big5_advanced_season_stats(season_end_year= 2023, stat_type= "standard", team_or_player= "player")
#Load coutnry abbreviations matched to names so we can get full names
fifaCodes <- read.csv(here("Europe_Borders/Fifa_Country_Codes.csv"))
# #Load world population data driectly into R
# popData <- world_bank_pop %>%
#   mutate(Nation = countrycode(country, origin = "iso3c", destination="country.name.en")) %>% #Get country name from code
#   filter(indicator == "SP.POP.TOTL") %>% #Take only total population
#   select("Pop" = "2017", #Take most recent year available
#          "Nation") %>%
#   #Make some names match the names in the other datasets
#   mutate(Nation = case_when(
#     Nation == "United Kingdom" ~ "UK",
#     Nation == "United States" ~ "USA",
#     Nation == "Bosnia & Herzegovina" ~ "Bosnia and Herzegovina",
#     Nation == "Ivory Coast" ~  "Côte d’Ivoire",
#     Nation == "Czechia" ~ "Czech Republic",
#     Nation == "Myanmar (Burma)" ~ "Myanmar",
#     Nation == "Ireland" ~ "Republic of Ireland",
#     # Nation == "French Guiana" ~ "" #French guiana and DRC appear missing from pop data
#     TRUE ~ Nation
#     )
#   )
#Load downloaded world population data (https://databank.worldbank.org/source/population-estimates-and-projections)
popData <- read.csv(here("Europe_Borders/WB_Population_2022.csv")) %>%
rename( "Nation" = "Country.Name") %>%
#Make some names match the names in the other datasets
mutate(Nation = case_when(
Nation == "United Kingdom" ~ "UK",
Nation == "United States" ~ "USA",
Nation == "Bosnia & Herzegovina" ~ "Bosnia and Herzegovina",
Nation == "Cote d'Ivoire" ~  "Ivory Coast",
Nation == "Czechia" ~ "Czech Republic",
Nation == "Ireland" ~ "Republic of Ireland",
Nation == "Congo, Dem. Rep." ~ "Democratic Republic of the Congo",
Nation == "Congo, Rep." ~ "Republic of Congo",
Nation == "Russian Federation" ~ "Russia",
Nation == "Yemen, Rep." ~ "Yemen",
Nation == "Egypt, Arab Rep." ~ "Egypt",
Nation == "Syrian Arab Republic" ~ "Syria",
Nation == "Turkiye" ~ "Turkey",
Nation == "Iran, Islamic Rep." ~ "Iran",
Nation == "Venezuela, RB" ~ "Venezuela",
Nation == "Slovak Republic" ~ "Slovakia",
Nation == "Kyrgyz Republic" ~ "Kyrgyzstan",
Nation == "Korea, Dem. People's Rep." ~ "North Korea",
Nation == "Korea, Rep." ~ "South Korea",
Nation == "Lao PDR" ~ "Laos",
TRUE ~ Nation
)
)
#Load country polygons
borders <- map_data("world") %>%
rename(Nation = region) %>%
mutate(Nation = case_when(
Nation == "Ireland" ~ "Republic of Ireland",
# Nation == "Ivory Coast" ~  "Côte d’Ivoire",
TRUE ~ Nation
)
)
myPal <- brewer.pal("GnBu", n=9)
footballersNats <- footballers %>%
mutate(Nation = case_when(
Nation %in% c("ENG", "SCO","NIR", "WAL") ~ "UK",
TRUE ~ Nation
)
) %>%
group_by(Nation) %>%
summarise(Count = n()) %>%
#Give full country names
rename(Nation_Code = Nation) %>%
left_join(fifaCodes, by="Nation_Code") %>%
mutate(Nation = case_when(
Nation_Code == "UK" ~ "UK",
TRUE ~ Nation
)
)
bordersNats <- borders$Nation %>% unique() %>% as.data.frame()
tmp2 <- footballers$Nation %>%
unique() %>%
as.data.frame()
#Get number of players by nationality
natData <- footballers %>%
mutate(Nation = case_when(
Nation %in% c("ENG", "SCO","NIR", "WAL") ~ "UK",
TRUE ~ Nation
)
) %>%
group_by(Nation) %>%
summarise(Count = n()) %>%
#Give full country names
rename(Nation_Code = Nation) %>%
left_join(fifaCodes, by="Nation_Code") %>%
mutate(Nation = case_when(
Nation_Code == "UK" ~ "UK",
Nation_Code == "COD" ~ "Democratic Republic of the Congo",
Nation_Code == "CGO" ~ "Republic of Congo",
Nation_Code == "KOR" ~ "South Korea",
TRUE ~ Nation
)
) %>%
full_join(borders, by = "Nation") %>%
left_join(popData, by = "Nation") %>%
filter(Nation != "Antarctica")
#Replace NA player count with 0
natData$Count[is.na(natData$Count)] <- 0
natData <- natData %>%
mutate(CountPer10M =  Count/Pop*10000000)
natDataNats <- natData$Nation %>%
unique() %>%
as.data.frame()
#Plot ggplot of just europe
europe_gg <- ggplot(natData, aes(x=long, y=lat, group = group, fill = Count)) +
geom_polygon() +
coord_fixed(xlim = c(-15,25),
ylim = c(35, 65))+
scale_fill_distiller(palette = "Blues", direction = 1) +
theme(
plot.background = element_rect(fill  = "white"),
panel.grid = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
# axis.text = element_blank()
)
europe_gg
#PLot with log scale
world_gg_log <- natData %>%
ggplot(aes(x=long, y=lat, group = group,
text = paste0('Country: ', Nation,
'<br>', 'Players Per 10 Million People: ', round(CountPer10M,2)),
# fill = Count/Pop*1000000+(0.01/1000000)
fill = CountPer10M
# fill = Count
)) +
geom_polygon() +
# coord_fixed(xlim = c(-15,40),
#             ylim = c(35, 65))+
# scale_fill_distiller(palette = "Blues", direction = 1) +
# scale_fill_gradientn(colours = myPal,
#                     trans = "log", breaks = c(0.1,1,7),
#                     name = "Players Per Million") +
scale_fill_viridis(option = "viridis",
breaks = c(0.001, 0.1, 10),
trans = scales::pseudo_log_trans(sigma = 0.001),
name = paste0("Players Per",
"\n",
"10M Pop"),
labels = scales::scientific)+
ggtitle("Where Are Footballers in the Top 5 Leagues From?",
# subtitle = "\n"
) +
theme(
plot.background = element_rect(fill  = "#EFEFEF"),
panel.background = element_rect(fill  = "#EFEFEF"),
# legend.position = c(0.177,1.03),
# legend.direction = "horizontal",
# legend.margin = margin(0),
legend.background = element_rect(fill  = "#EFEFEF"),
# legend.position = "bottom",
panel.grid = element_blank(),
# panel.background = element_rect(fill  = lighten("#757780",0.8)),
axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_blank()
)
world_gg_log
world_plotly_log <- ggplotly(world_gg_log, tooltip = "text")
world_plotly_log
#No messages and warnings in HTML output
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = FALSE,
fig.width = 9, fig.height = 7)
#Clear memory
rm(list = ls(all = TRUE))
#Load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
janitor,        # data cleaning and tables
tidyverse,      # data management and visualization
knitr,          # print pretty results
plotly,         # interactive plots
worldfootballR, # Download FBref data
ggiraph,        # interactive ggplots
colorspace,     # lighten and darken text etc
ggrepel,        # repulsive text labels in plots
showtext        # custom fonts
# RColorBrewer, # color palettes
# wesanderson   # color palettes
)
#Download advanced GK stats from FbRef for 2020-21 to 2022-23 seasons
kprs_adv <- fb_big5_advanced_season_stats(season_end_year= c(2021:2023), stat_type= "keepers_adv", team_or_player= "player")
#Download basic GK stats from FbRef for 2020-21 to 2022-23 seasons
kprs_bas <- fb_big5_advanced_season_stats(season_end_year= c(2021:2023), stat_type= "keepers", team_or_player= "player") %>%
select(Player, Season_End_Year, MP_Playing) #I only acutally need matches played from this
#Join the two datasets
myData <- full_join(kprs_adv, kprs_bas, by=c("Player","Season_End_Year"))
#Set Palette... I suffer from indecision
# myPal <- brewer.pal(8,"Dark2")
# myPal <- wes_palette(name="Darjeeling1", n=5)
# myPal <- c("#589C48","#F58024","#994FB2","#1A1A1D")
# myPal <- c("#8c38a5","#DD4D21","#3A6D41","#21ddd0","#6d3c3a","#a59838","#757780","#1A1A1D")
#Palette for plotting
myPal <- c(
back_color = lighten("#F0DCCA", 0.8),
dark_text = "#0a0903",
light_text = "grey30"
)
colPal <- c(
"#3A6D41",
"#DD4D21",
"#8c38a5"
)
#Add Roboto font family
font_add(family = "Roboto",
regular = "C:/USERS/GVAND/APPDATA/LOCAL/MICROSOFT/WINDOWS/FONTS/ROBOTO-REGULAR.ttf",
bold = "C:/USERS/GVAND/APPDATA/LOCAL/MICROSOFT/WINDOWS/FONTS/ROBOTO-BOLD.ttf")
showtext_auto()
#Cleaning
myData <- myData %>%
#Rename variables
rename("Year" = "Season_End_Year" ,
"PSxG_Abv" = "PSxG+_per__minus__Expected",
"PSxG" = "PSxG_Expected",
"Matches" = "MP_Playing",
"Lch_Cmp_Pct" = "Cmp_percent_Launched",
"Lch_Pct" = "Launch_percent_Passes",
"Lchs" = "Att_Launched",
"Cmp" = "Cmp_Launched",
"Opp" = "Opp_Crosses",
"Stp" = "Stp_Crosses",
"Stp_Pct" = "Stp_percent_Crosses",
"AvgDist" = "AvgDist_Sweeper",
"OPA" = "#OPA_Sweeper",
"OPA90" = "#OPA_per_90_Sweeper",
"Name" = "Player")
#More wrangling
myData <- myData %>%
mutate(My_Stat = PSxG_Abv/PSxG, #Create goals saved above expected per expected goal
Age_Category = case_when(     #Create age categories
Age < 25 ~ "Under 25",
Age > 30 ~ "Over 30",
TRUE ~ "25 to 30"
),
Age_Category = factor(Age_Category, levels = c("Under 25", "25 to 30", "Over 30")),
Year = case_when(
Year == 2021 ~ "2020-21",
Year == 2022 ~ "2021-22",
Year == 2023 ~ "2022-23"
)
)
#Combined data for past three seasons
aggData <- myData %>%
group_by(Name) %>%
select(Name, Squad, Matches, OPA, AvgDist, PSxG_Abv, PSxG, Lchs, Cmp, Opp, Stp, Age, Age_Category) %>%
mutate(Seasons = 1,                       #To be summed in next line to get number of seasons in data
Age=as.character(Age)) %>%         #So that it does not get summed
mutate_if(is.numeric, sum) %>%            #Sum all numeric variables to get total over past three seasons
filter(Seasons > 1, Matches >= 38) %>%    #Must have played in at least two of the last three seasons & a total of at least 38 matches
mutate(Age = as.numeric(Age),             #Turn age back into numeric
AvgDist = AvgDist/Seasons) %>%     #Average distance has to be simple average due to data available
slice_max(Age)                            #Take just one row per player with current age
curData <- myData %>%
filter(Year=="2022-23", Matches >= 15)
View(kprs_adv)
