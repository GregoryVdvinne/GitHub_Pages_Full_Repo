sex == "T",        # Male and female
age == "TOTAL"     # All ages
) %>%
mutate(year = substr(TIME_PERIOD, start = 1, stop = 4)) %>% #Take only year
select(-c(TIME_PERIOD)) %>%
pivot_wider(names_from = year, values_from = values) %>% #years into cols
mutate(ten_chg = (`2021` - `2012`)) #Calculate change from 2012 to 2021
#Define longlat projection
crsLongLat <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
nuts <- giscoR::gisco_get_nuts(
year = "2021",
resolution = "3",
nuts_level = "0"
) %>%
sf::st_transform(crsLongLat)
# plot(sf::st_geometry(nuts))
# head(nuts)
cntrys <- giscoR::gisco_get_countries(
year = "2020",
resolution = "3",
region = c("Europe", "Asia")
) %>%
sf::st_transform(crsLongLat)
non_eu_list <- c("BA", "BY", "GE","MD", "UA")
non_eu <- cntrys %>%
filter(CNTR_ID %in% non_eu_list) %>%
rename(geo = CNTR_ID) %>%
as.data.frame()
#Join nuts with myData
myData <- left_join(nuts, myData, by = "geo") %>%
full_join(non_eu, by = c("geo", "geometry"))
### Colors and stuff ###
#Add Cabin font family
font_add(family = "Cabin",
regular = "C:/USERS/GVAND/APPDATA/LOCAL/MICROSOFT/WINDOWS/FONTS/Cabin-VariableFont_wdth,wght.ttf")
showtext_auto()
# Save Caption
myCaption <- c("Data Sources: Eurostat & UK House of Commons Library", "Created by Gregory Vander Vinne")
#Text Colors
dark_text = darken("#696047",0.75)
light_text = "#696047"
# Background color
back_color = lighten("#f2e86d", 0.95)
# back_color = "#EFEFEF"
# back_color = "white"
# #Load discrete diverging palette
# divergingPal <- brewer.pal(8, "RdBu")[c(1:3,6:8)]
#Load continuous diverging palette
divergingPal <- brewer.pal(11, "RdBu")[c(1,11)]
#View palette
swatchplot(divergingPal)
#Define Theme
my_theme <- function() {
theme_minimal() +
theme(
plot.background = element_rect(fill  = back_color, color = back_color),
panel.background = element_rect(fill  = back_color, color = back_color),
panel.grid = element_blank(),
axis.ticks = element_blank(),
plot.title.position = "plot",
plot.caption.position = "plot",
plot.title = ggtext::element_textbox_simple(color = dark_text,
family = "Cabin",
size = 24,
margin = margin(6, 6, 15, 6)
),
plot.subtitle = ggtext::element_textbox_simple(color = light_text,
family = "Cabin",
size = 12,
margin = margin(0,6,15,6)),
axis.title = element_blank(),
axis.text = element_blank(),
plot.caption = element_text(color = light_text,
family = "Cabin",
size = 9,
margin = margin(0,6,4,6),
hjust = c(0,1)), # One in bottom-left, one in bottom-right
legend.text = element_text(color = light_text,
family = "Cabin",
size = 10,
margin = margin(0,0,4,0)),
legend.titlet = element_text(color = light_text,
family = "Cabin",
size = 11,
margin = margin(0,0,4,0))
)
}
### Bounding Box ###
#Create europe bounding box
crsLAEA <- "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +datum=WGS84 +units=m +no_defs"
get_bounding_box_europe <- function() {
xmin <- -10.6600
xmax <- 36.5500
ymin <- 34.5000
ymax <- 71.0500
bbox_laea <- sf::st_sfc(
sf::st_polygon(list(cbind(
c(xmin, xmax, xmax, xmin, xmin),
c(ymin, ymin, ymax, ymax, ymin)
))),
crs = crsLongLat
) |> sf::st_transform(crsLAEA)
bbox <- sf::st_bbox(bbox_laea)
return(bbox)
}
bbox <- get_bounding_box_europe()
### Plot ###
p <-
ggplot() +
geom_sf(data = myData, aes(fill = ten_chg)) +
# geom_sf(data = non_eu, aes(geometry = non_eu$geometry)) +
coord_sf(
crs = crsLAEA,
xlim = c(bbox["xmin"], bbox["xmax"]),
ylim = c(bbox["ymin"], bbox["ymax"])
) +
labs(title = "Change in Number of Prisoners Per 100k Population From 2011 to 2021",
subtitle = "While most European countries saw their prison populations decrease modeslty as a share of their total populations from 2011 to 2021, the Baltic countries saw significant decreases, and Turkiye saw a massive increase.",
caption = myCaption) +
# scale_fill_distiller("RdBu") +
# scale_fill_stepsn(colours=rev(divergingPal),
#                     breaks=seq(-150,150,by=60)) +
scale_fill_gradient2(low = divergingPal[2],  high = divergingPal[1],
midpoint = 0, mid = "white",
name = paste0("Change in",
"\n",
"Prisoners Per",
"\n",
"100k Pop")) +
my_theme()
p
#Clear memory
rm(list = ls(all = TRUE))
#Set some rmarkdown options
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
fig.height = 7, fig.width = 9)
#Load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
here,           # data cleaning and tables
tidyverse,      # data management and visualization
eurostat,       # load data directly from eurostat
knitr,          # print pretty results
ggiraph,        # interactive ggplots
showtext,       # custom fonts
RColorBrewer,   # color palettes
giscoR,         # shape files etc
sf,             # gis stuff
colorspace      # fancy stuff with colors
)
# #Find the eurostat data based on what I know of the table code
# toc <- eurostat::get_eurostat_toc()
# i <- "crim_pris"
# tab <- subset(
#     toc, grepl(i, code)
# )
# fix(tab)
#Download entire data set
myData <- eurostat::get_eurostat("crim_pris_age")
#Wrangle data a bit
myData <- myData %>%
filter(
unit == "P_HTHAB", # Per 10m inhabitants
sex == "T",        # Male and female
age == "TOTAL"     # All ages
) %>%
mutate(year = substr(TIME_PERIOD, start = 1, stop = 4)) %>% #Take only year
select(-c(TIME_PERIOD)) %>%
pivot_wider(names_from = year, values_from = values) %>% #years into cols
mutate(ten_chg = (`2021` - `2012`)) #Calculate change from 2012 to 2021
#Define longlat projection
crsLongLat <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
nuts <- giscoR::gisco_get_nuts(
year = "2021",
resolution = "3",
nuts_level = "0"
) %>%
sf::st_transform(crsLongLat)
# plot(sf::st_geometry(nuts))
# head(nuts)
cntrys <- giscoR::gisco_get_countries(
year = "2020",
resolution = "3",
region = c("Europe", "Asia")
) %>%
sf::st_transform(crsLongLat)
non_eu_list <- c("BA", "BY", "GE","MD", "UA")
non_eu <- cntrys %>%
filter(CNTR_ID %in% non_eu_list) %>%
rename(geo = CNTR_ID) %>%
as.data.frame()
#Join nuts with myData
myData <- left_join(nuts, myData, by = "geo") %>%
full_join(non_eu, by = c("geo", "geometry"))
### Colors and stuff ###
#Add Cabin font family
font_add(family = "Cabin",
regular = "C:/USERS/GVAND/APPDATA/LOCAL/MICROSOFT/WINDOWS/FONTS/Cabin-VariableFont_wdth,wght.ttf")
showtext_auto()
# Save Caption
myCaption <- c("Data Sources: Eurostat & UK House of Commons Library", "Created by Gregory Vander Vinne")
#Text Colors
dark_text = darken("#696047",0.75)
light_text = "#696047"
# Background color
back_color = lighten("#f2e86d", 0.95)
# back_color = "#EFEFEF"
# back_color = "white"
# #Load discrete diverging palette
# divergingPal <- brewer.pal(8, "RdBu")[c(1:3,6:8)]
#Load continuous diverging palette
divergingPal <- brewer.pal(11, "RdBu")[c(1,11)]
#View palette
swatchplot(divergingPal)
#Define Theme
my_theme <- function() {
theme_minimal() +
theme(
plot.background = element_rect(fill  = back_color, color = back_color),
panel.background = element_rect(fill  = back_color, color = back_color),
panel.grid = element_blank(),
axis.ticks = element_blank(),
plot.title.position = "plot",
plot.caption.position = "plot",
plot.title = ggtext::element_textbox_simple(color = dark_text,
family = "Cabin",
size = 24,
margin = margin(6, 6, 15, 6)
),
plot.subtitle = ggtext::element_textbox_simple(color = light_text,
family = "Cabin",
size = 12,
margin = margin(0,6,15,6)),
axis.title = element_blank(),
axis.text = element_blank(),
plot.caption = element_text(color = light_text,
family = "Cabin",
size = 9,
margin = margin(0,6,4,6),
hjust = c(0,1)), # One in bottom-left, one in bottom-right
legend.text = element_text(color = light_text,
family = "Cabin",
size = 10,
margin = margin(0,0,4,0)),
legend.title = element_text(color = light_text,
family = "Cabin",
size = 11,
margin = margin(0,0,4,0))
)
}
### Bounding Box ###
#Create europe bounding box
crsLAEA <- "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +datum=WGS84 +units=m +no_defs"
get_bounding_box_europe <- function() {
xmin <- -10.6600
xmax <- 36.5500
ymin <- 34.5000
ymax <- 71.0500
bbox_laea <- sf::st_sfc(
sf::st_polygon(list(cbind(
c(xmin, xmax, xmax, xmin, xmin),
c(ymin, ymin, ymax, ymax, ymin)
))),
crs = crsLongLat
) |> sf::st_transform(crsLAEA)
bbox <- sf::st_bbox(bbox_laea)
return(bbox)
}
bbox <- get_bounding_box_europe()
### Plot ###
p <-
ggplot() +
geom_sf(data = myData, aes(fill = ten_chg)) +
# geom_sf(data = non_eu, aes(geometry = non_eu$geometry)) +
coord_sf(
crs = crsLAEA,
xlim = c(bbox["xmin"], bbox["xmax"]),
ylim = c(bbox["ymin"], bbox["ymax"])
) +
labs(title = "Change in Number of Prisoners Per 100k Population From 2011 to 2021",
subtitle = "While most European countries saw their prison populations decrease modeslty as a share of their total populations from 2011 to 2021, the Baltic countries saw significant decreases, and Turkiye saw a massive increase.",
caption = myCaption) +
# scale_fill_distiller("RdBu") +
# scale_fill_stepsn(colours=rev(divergingPal),
#                     breaks=seq(-150,150,by=60)) +
scale_fill_gradient2(low = divergingPal[2],  high = divergingPal[1],
midpoint = 0, mid = "white",
name = paste0("Change in",
"\n",
"Prisoners Per",
"\n",
"100k Pop")) +
my_theme()
p
slope_data <-  myData %>%
select(`2011`, `2021`, geo, ten_chg
# ,country = NAME_ENGLISH
) %>%
pivot_longer(cols = c(`2011`,`2021`),
names_to = "Year",
values_to = "Value") %>%
mutate(Year = as.integer(Year)) %>%
drop_na()
p <- ggplot(slope_data, aes(x = Year, y = Value, color = ten_chg, group = geo)) +
geom_line(show.legend = FALSE) +
geom_point(show.legend = FALSE) +
geom_vline(xintercept = c(2011, 2021)) +
#Labels for first Year
geom_text(data = subset(slope_data, Year == 2011),
aes(x = Year, y = Value, label = geo),
hjust = 1, nudge_x = -.05,
show.legend = FALSE, inherit.aes = FALSE) +
#Labels for second Year
geom_text(data = subset(slope_data, Year == 2021),
aes(x = Year, y = Value, label = geo),
hjust = 0, nudge_x = .05,
show.legend = FALSE, inherit.aes = FALSE) +
scale_color_gradient(low = divergingPal[2],  high = divergingPal[1],
name = "") +
my_theme()
p
usethis::create_from_github("https://github.com/GregoryVdvinne/did_monte_carlo.git",
destdir = "C:\Users\gvand\OneDrive - ualberta.ca\R")
usethis::create_from_github("https://github.com/GregoryVdvinne/did_monte_carlo.git",
destdir = "C:/Users/gvand/OneDrive - ualberta.ca/R")
usethis::create_from_github("https://github.com/GregoryVdvinne/One_Off_Viz.git",
"C:\Users\gvand\OneDrive - ualberta.ca\R")
usethis::create_from_github("https://github.com/GregoryVdvinne/One_Off_Viz.git",
"C:/Users/gvand/OneDrive - ualberta.ca/R")
#No messages and warnings in HTML output
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = FALSE,
fig.width = 10, fig.height = 6)
##### Setup #####
#Clear memory
rm(list = ls(all = TRUE))
#Load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse,     # data management and visualization
ggtext,        # Fancy Annotations using HTML etc
ggside,        # Density plots in margins of ggplots
ggrepel,       # repulsive text annotations
showtext,      # help with downloaded fonts
systemfonts,   # use downloaded fonts
colorspace,    # lighten and darken colors etc
worldfootballR # football statistics
)
#Download advanced GK stats from FbRef for 2020-21 to 2022-23 seasons
myData <- fb_big5_advanced_season_stats(season_end_year= c(2021:2023), stat_type= "keepers_adv", team_or_player= "player")
#Download basic GK stats from FbRef for 2020-21 to 2022-23 seasons
kprs_bas <- fb_big5_advanced_season_stats(season_end_year= c(2021:2023), stat_type= "keepers", team_or_player= "player") %>%
select(Player, Season_End_Year, Min_Playing) #I only acutally need minutes played from this
#Join the two datasets
myData <- full_join(myData, kprs_bas, by=c("Player","Season_End_Year"))
#Add Roboto font family
font_add(family = "Roboto",
regular = "C:/USERS/GVAND/APPDATA/LOCAL/MICROSOFT/WINDOWS/FONTS/ROBOTO-REGULAR.ttf",
bold = "C:/USERS/GVAND/APPDATA/LOCAL/MICROSOFT/WINDOWS/FONTS/ROBOTO-BOLD.ttf")
showtext_auto()
#Palette for plotting
myPal <- c(
myBlue = '#095786',
myRed ="#ae0000",
myBeige = lighten("#e6cea0", 0.65),
dark_text = "#0a0903",
light_text = "grey30"
)
#Tiny bit of cleaning
myData <- myData %>%
rename(OPA = "#OPA_Sweeper",
OPA_90 = "#OPA_per_90_Sweeper",
AvgDist = "AvgDist_Sweeper") %>%
mutate(Year = case_when(
Season_End_Year == 2021 ~ "2020-21",
Season_End_Year == 2022 ~ "2021-22",
Season_End_Year == 2023 ~ "2022-23"
),
Year = factor(Year, levels = c("2022-23","2021-22","2020-21")) # for ordering in plot
)
##### Bar Plot #####
#Aggregate Data
barPlotData <- myData %>%
filter(Comp %in% c("Serie A", "Bundesliga")) %>%
group_by(Comp, Year) %>%
summarise(OPA_90 = (sum(OPA, na.rm = TRUE)/sum(Min_Playing, na.rm = TRUE))*90) %>%
ungroup()
#Plot
barPlotData %>%
ggplot(aes(x = Year, y = OPA_90, fill=Comp)) +
geom_bar(stat = "identity", position = "dodge", colour = myPal["myBeige"], aes(alpha=Year)) +
coord_flip() +
scale_alpha_manual(values = c(1,0.8,0.6)) +
scale_fill_manual(values = c("#095786","#ae0000"))+  #scale fill argument glitching when feeding palette values
scale_color_manual(values = c("#095786","#ae0000"))+
facet_wrap(Comp ~ ., ncol = 1) +
labs(y = "Goalkeeper Actions Outside of Penalty Area Per 90 Minutes",
title = paste0("<span style='color:",
myPal["myBlue"], "'>Bundesliga</span>
Keepers Play The Ball Outside of Their Pentalty Area
More Often Than <span style='color:",
myPal["myRed"], "'>Serie A</span> Keepers"),
caption = "Data Source: FBref.com") +
geom_richtext(aes(label= format(round(OPA_90,2), nsmall=2)), #format w/ nsmall keeps trailing zeros
hjust=1,
color=myPal["myBeige"],
fill=NA,
label.colour=NA,
family="Roboto",
fontface = "bold",
size = 8,
)+
theme(legend.position = "none",
plot.title.position = "plot",
axis.title.y = element_blank(),
axis.title.x = element_text(face = "bold",
color = myPal["light_text"],
size = 24,
margin = margin(6,0,6,0)),
axis.ticks = element_blank(),
axis.text = element_text(color=myPal["light_text"], size=18),
text = element_text(family = "Roboto", colour = myPal[3]),
plot.caption = element_text(family = "Roboto", colour = myPal["light_text"],
hjust = -0.065, size = 20),
plot.title = ggtext::element_textbox_simple(family = "Roboto",
size = 32,
face = "bold",
halign = 0, colour = myPal["dark_text"],
margin = margin(4,0,10,0)),
strip.text = element_text(family = "Roboto",
hjust = 0.05,
face = "bold",
size = 24,
colour = myPal["light_text"]),
plot.background = element_rect(fill  = myPal["myBeige"]),
panel.grid = element_blank(),
panel.background = element_blank(),
strip.background = element_blank())
#### Scatter Plot ####
# Wrangle Data
sctrPlotData <- myData %>%
filter(Comp %in% c("Serie A", "Bundesliga"),
Min_Playing >= 900) %>%
select(Player, Year, Comp, OPA_90, AvgDist, Min_Playing)
# Plot
sctrPlotData %>%
ggplot(aes(x = AvgDist, y = OPA_90, color=Comp,fill = Comp, shape=Comp)) +
geom_point(alpha = 0.8) +
geom_text_repel(aes(label =
case_when(OPA_90 > 3 ~ paste0(strsplit(Player,"\\s+") %>% sapply(`[`, 2),
", " ,
Year),
TRUE ~ ""),
),
show.legend = FALSE, size = 6, family = "Roboto", alpha = 0.8) +
geom_xsidedensity(aes(y=after_stat(density)), alpha = 0.5, show.legend = FALSE) +
geom_ysidedensity(aes(x=after_stat(density)), alpha = 0.5, show.legend = FALSE) +
scale_xsidey_continuous(breaks = NULL) +
scale_ysidex_continuous(breaks = NULL) +
scale_color_manual(values = c("#095786","#ae0000"),
name= "") +
scale_fill_manual(values = c("#095786","#ae0000"),
name= "") +
scale_shape_manual(values=c(15,16),
name="") +
labs(y = "Actions Outside of Penalty Area Per 90 Minutes",
x = "Average Distance From Goal of All Defensive Actions (Yards)",
title = paste0("<span style='color:",
myPal["myBlue"], "'>Bundesliga</span>
Keepers Do More 'Sweeper Keeping'
Than <span style='color:",
myPal["myRed"], "'>Serie A</span> Keepers"),
subtitle = "\n",
caption = c("Data Source: FBref.com", #Bottom-left caption
"2020-21 to 2022-23, Minimum 900 minutes each season" )) + #Bottom-right caption
guides(fill = "none") + #exclude fill aestethic from legend
theme(
# legend.position = "top",
legend.position = c(0.055,1.065),
legend.direction = "horizontal",
legend.margin = margin(5,0,5,0),
legend.background = element_rect(fill =myPal["myBeige"]),
legend.key = element_blank(), #remove grey behind each point
legend.text = element_text(color = myPal["light_text"], size = 22),
plot.title.position = "plot",
axis.title.y = element_text(face = "bold",
color = myPal["light_text"],
size = 24,
margin = margin(0,6,0,0)),
axis.title.x = element_text(face = "bold",
color = myPal["light_text"],
size = 24,
margin = margin(6,0,6,0)),
# axis.ticks = element_line(color=myPal["light_text"]),
axis.ticks = element_blank(),
axis.text = element_text(color=myPal["light_text"], size=18),
axis.line = element_line(color=myPal["light_text"]),
# axis.line = element_blank(),
text = element_text(family = "Roboto", colour = myPal[3]),
plot.caption = element_text(family = "Roboto", colour = myPal["light_text"],
hjust = c(-0.04,1), size = c(20,20)), #Allows captions in bottom right and bottom left
plot.title = ggtext::element_textbox_simple(family = "Roboto",
size = 32,
face = "bold",
halign = 0, colour = myPal["dark_text"],
margin = margin(4,0,10,0)),
plot.background = element_rect(fill  = myPal["myBeige"]),
panel.grid = element_blank(),
panel.background = element_blank())
update.packages("ggside")
update.packages(ggside)
install.packages("ggside")
install.packages("ggside")
