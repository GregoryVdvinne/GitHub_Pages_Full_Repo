<<<<<<< HEAD
# fill = Count
)) +
geom_polygon() +
=======
fill = CountPer10M
# fill = Count
)) +
geom_polygon_interactive(tooltip = natData$tooltip,
data_id = natData$tooltip) +
>>>>>>> Footballer_Maps
# coord_fixed(xlim = c(-15,40),
#             ylim = c(35, 65))+
# scale_fill_distiller(palette = "Blues", direction = 1) +
# scale_fill_gradientn(colours = myPal,
#                     trans = "log", breaks = c(0.1,1,7),
#                     name = "Players Per Million") +
scale_fill_viridis(option = "viridis",
<<<<<<< HEAD
breaks = c(0.001, 0.1, 10),
=======
breaks = c(0, 0.2, 20),
>>>>>>> Footballer_Maps
trans = scales::pseudo_log_trans(sigma = 0.001),
name = paste0("Players Per",
"\n",
"10M Pop"),
<<<<<<< HEAD
labels = scales::scientific)+
ggtitle("Where Are Footballers in the Top 5 Leagues From?",
# subtitle = "\n"
) +
theme(
plot.background = element_rect(fill  = "#EFEFEF"),
panel.background = element_rect(fill  = "#EFEFEF"),
# legend.position = c(0.177,1.03),
# legend.direction = "horizontal",
# legend.margin = margin(0),
legend.background = element_rect(fill  = "#EFEFEF"),
# legend.position = "bottom",
panel.grid = element_blank(),
# panel.background = element_rect(fill  = lighten("#757780",0.8)),
axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_blank()
)
world_gg_log
world_plotly_log <- ggplotly(world_gg_log, tooltip = "text")
world_plotly_log
View(popData)
View(bordersNats)
View(popData)
knitr::opts_chunk$set(echo = TRUE)
#Clear memory
rm(list = ls(all = TRUE))
#Load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse,     # data management and visualization
showtext,      # help with downloaded fonts
systemfonts,   # use downloaded fonts
eurostat,      # get list of european countries
here,          # relative file pathways
RColorBrewer,  # effective color palettes
rayshader,     # 3d plots
colorspace,    # fancy work with colors like darken and lighten
countrycode,   # iso codes and country names
viridis,       # better map colors
plotly,        # interactive plots
worldfootballR # football statistics
)
#Download basic player-level stats from FbRef for 2020-21 to 2022-23 seasons
footballers <- fb_big5_advanced_season_stats(season_end_year= 2023, stat_type= "standard", team_or_player= "player")
#Load coutnry abbreviations matched to names so we can get full names
fifaCodes <- read.csv(here("Europe_Borders/Fifa_Country_Codes.csv"))
# #Load world population data driectly into R
# popData <- world_bank_pop %>%
#   mutate(Nation = countrycode(country, origin = "iso3c", destination="country.name.en")) %>% #Get country name from code
#   filter(indicator == "SP.POP.TOTL") %>% #Take only total population
#   select("Pop" = "2017", #Take most recent year available
#          "Nation") %>%
#   #Make some names match the names in the other datasets
#   mutate(Nation = case_when(
#     Nation == "United Kingdom" ~ "UK",
#     Nation == "United States" ~ "USA",
#     Nation == "Bosnia & Herzegovina" ~ "Bosnia and Herzegovina",
#     Nation == "Ivory Coast" ~  "Côte d’Ivoire",
#     Nation == "Czechia" ~ "Czech Republic",
#     Nation == "Myanmar (Burma)" ~ "Myanmar",
#     Nation == "Ireland" ~ "Republic of Ireland",
#     # Nation == "French Guiana" ~ "" #French guiana and DRC appear missing from pop data
#     TRUE ~ Nation
#     )
#   )
#Load downloaded world population data (https://databank.worldbank.org/source/population-estimates-and-projections)
popData <- read.csv(here("Europe_Borders/WB_Population_2022.csv")) %>%
rename( "Nation" = "Country.Name") %>%
#Make some names match the names in the other datasets
mutate(Nation = case_when(
Nation == "United Kingdom" ~ "UK",
Nation == "United States" ~ "USA",
Nation == "Bosnia & Herzegovina" ~ "Bosnia and Herzegovina",
Nation == "Cote d'Ivoire" ~  "Côte d’Ivoire",
Nation == "Czechia" ~ "Czech Republic",
Nation == "Ireland" ~ "Republic of Ireland",
Nation == "Congo, Dem. Rep." ~ "Democratic Republic of the Congo",
Nation == "Congo, Rep." ~ "Republic of Congo",
Nation == "Russian Federation" ~ "Russia",
Nation == "Yemen, Rep." ~ "Yemen",
Nation == "Egypt, Arab Rep." ~ "Egypt",
Nation == "Syrian Arab Republic" ~ "Syria",
Nation == "Turkiye" ~ "Turkey",
Nation == "Iran, Islamic Rep." ~ "Iran",
Nation == "Venezuela, RB" ~ "Venezuela",
Nation == "Slovak Republic" ~ "Slovakia",
Nation == "Kyrgyz Republic" ~ "Kyrgyzstan",
Nation == "Korea, Dem. People's Rep." ~ "North Korea",
Nation == "Korea, Rep." ~ "South Korea",
Nation == "Lao PDR" ~ "Laos",
TRUE ~ Nation
)
)
#Load country polygons
borders <- map_data("world") %>%
rename(Nation = region) %>%
mutate(Nation = case_when(
Nation == "Ireland" ~ "Republic of Ireland",
Nation == "Ivory Coast" ~  "Côte d’Ivoire",
TRUE ~ Nation
)
)
myPal <- brewer.pal("GnBu", n=9)
footballersNats <- footballers %>%
mutate(Nation = case_when(
Nation %in% c("ENG", "SCO","NIR", "WAL") ~ "UK",
TRUE ~ Nation
)
) %>%
group_by(Nation) %>%
summarise(Count = n()) %>%
#Give full country names
rename(Nation_Code = Nation) %>%
left_join(fifaCodes, by="Nation_Code") %>%
mutate(Nation = case_when(
Nation_Code == "UK" ~ "UK",
TRUE ~ Nation
)
)
bordersNats <- borders$Nation %>% unique() %>% as.data.frame()
tmp2 <- footballers$Nation %>%
unique() %>%
as.data.frame()
#Get number of players by nationality
natData <- footballers %>%
mutate(Nation = case_when(
Nation %in% c("ENG", "SCO","NIR", "WAL") ~ "UK",
TRUE ~ Nation
)
) %>%
group_by(Nation) %>%
summarise(Count = n()) %>%
#Give full country names
rename(Nation_Code = Nation) %>%
left_join(fifaCodes, by="Nation_Code") %>%
mutate(Nation = case_when(
Nation_Code == "UK" ~ "UK",
Nation_Code == "COD" ~ "Democratic Republic of the Congo",
Nation_Code == "CGO" ~ "Republic of Congo",
TRUE ~ Nation
)
) %>%
full_join(borders, by = "Nation") %>%
left_join(popData, by = "Nation") %>%
filter(Nation != "Antarctica")
#Replace NA player count with 0
natData$Count[is.na(natData$Count)] <- 0
natData <- natData %>%
mutate(CountPer10M =  Count/Pop*10000000)
natDataNats <- natData$Nation %>%
unique() %>%
as.data.frame()
#Plot ggplot of just europe
europe_gg <- ggplot(natData, aes(x=long, y=lat, group = group, fill = Count)) +
geom_polygon() +
coord_fixed(xlim = c(-15,25),
ylim = c(35, 65))+
scale_fill_distiller(palette = "Blues", direction = 1) +
theme(
plot.background = element_rect(fill  = "white"),
panel.grid = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
# axis.text = element_blank()
)
europe_gg
#PLot with log scale
world_gg_log <- natData %>%
ggplot(aes(x=long, y=lat, group = group,
text = paste0('Country: ', Nation,
'<br>', 'Players Per 10 Million People: ', round(CountPer10M,2)),
# fill = Count/Pop*1000000+(0.01/1000000)
fill = CountPer10M
# fill = Count
)) +
geom_polygon() +
# coord_fixed(xlim = c(-15,40),
#             ylim = c(35, 65))+
# scale_fill_distiller(palette = "Blues", direction = 1) +
# scale_fill_gradientn(colours = myPal,
#                     trans = "log", breaks = c(0.1,1,7),
#                     name = "Players Per Million") +
scale_fill_viridis(option = "viridis",
breaks = c(0.001, 0.1, 10),
trans = scales::pseudo_log_trans(sigma = 0.001),
name = paste0("Players Per",
"\n",
"10M Pop"),
labels = scales::scientific)+
ggtitle("Where Are Footballers in the Top 5 Leagues From?",
# subtitle = "\n"
) +
theme(
plot.background = element_rect(fill  = "#EFEFEF"),
panel.background = element_rect(fill  = "#EFEFEF"),
# legend.position = c(0.177,1.03),
# legend.direction = "horizontal",
# legend.margin = margin(0),
legend.background = element_rect(fill  = "#EFEFEF"),
# legend.position = "bottom",
panel.grid = element_blank(),
# panel.background = element_rect(fill  = lighten("#757780",0.8)),
axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_blank()
)
world_gg_log
world_plotly_log <- ggplotly(world_gg_log, tooltip = "text")
world_plotly_log
View(bordersNats)
View(footballersNats)
View(footballersNats)
knitr::opts_chunk$set(echo = TRUE)
#Clear memory
rm(list = ls(all = TRUE))
#Load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse,     # data management and visualization
showtext,      # help with downloaded fonts
systemfonts,   # use downloaded fonts
eurostat,      # get list of european countries
here,          # relative file pathways
RColorBrewer,  # effective color palettes
rayshader,     # 3d plots
colorspace,    # fancy work with colors like darken and lighten
countrycode,   # iso codes and country names
viridis,       # better map colors
plotly,        # interactive plots
worldfootballR # football statistics
)
#Download basic player-level stats from FbRef for 2020-21 to 2022-23 seasons
footballers <- fb_big5_advanced_season_stats(season_end_year= 2023, stat_type= "standard", team_or_player= "player")
#Load coutnry abbreviations matched to names so we can get full names
fifaCodes <- read.csv(here("Europe_Borders/Fifa_Country_Codes.csv"))
# #Load world population data driectly into R
# popData <- world_bank_pop %>%
#   mutate(Nation = countrycode(country, origin = "iso3c", destination="country.name.en")) %>% #Get country name from code
#   filter(indicator == "SP.POP.TOTL") %>% #Take only total population
#   select("Pop" = "2017", #Take most recent year available
#          "Nation") %>%
#   #Make some names match the names in the other datasets
#   mutate(Nation = case_when(
#     Nation == "United Kingdom" ~ "UK",
#     Nation == "United States" ~ "USA",
#     Nation == "Bosnia & Herzegovina" ~ "Bosnia and Herzegovina",
#     Nation == "Ivory Coast" ~  "Côte d’Ivoire",
#     Nation == "Czechia" ~ "Czech Republic",
#     Nation == "Myanmar (Burma)" ~ "Myanmar",
#     Nation == "Ireland" ~ "Republic of Ireland",
#     # Nation == "French Guiana" ~ "" #French guiana and DRC appear missing from pop data
#     TRUE ~ Nation
#     )
#   )
#Load downloaded world population data (https://databank.worldbank.org/source/population-estimates-and-projections)
popData <- read.csv(here("Europe_Borders/WB_Population_2022.csv")) %>%
rename( "Nation" = "Country.Name") %>%
#Make some names match the names in the other datasets
mutate(Nation = case_when(
Nation == "United Kingdom" ~ "UK",
Nation == "United States" ~ "USA",
Nation == "Bosnia & Herzegovina" ~ "Bosnia and Herzegovina",
Nation == "Cote d'Ivoire" ~  "Ivory Coast",
Nation == "Czechia" ~ "Czech Republic",
Nation == "Ireland" ~ "Republic of Ireland",
Nation == "Congo, Dem. Rep." ~ "Democratic Republic of the Congo",
Nation == "Congo, Rep." ~ "Republic of Congo",
Nation == "Russian Federation" ~ "Russia",
Nation == "Yemen, Rep." ~ "Yemen",
Nation == "Egypt, Arab Rep." ~ "Egypt",
Nation == "Syrian Arab Republic" ~ "Syria",
Nation == "Turkiye" ~ "Turkey",
Nation == "Iran, Islamic Rep." ~ "Iran",
Nation == "Venezuela, RB" ~ "Venezuela",
Nation == "Slovak Republic" ~ "Slovakia",
Nation == "Kyrgyz Republic" ~ "Kyrgyzstan",
Nation == "Korea, Dem. People's Rep." ~ "North Korea",
Nation == "Korea, Rep." ~ "South Korea",
Nation == "Lao PDR" ~ "Laos",
TRUE ~ Nation
)
)
#Load country polygons
borders <- map_data("world") %>%
rename(Nation = region) %>%
mutate(Nation = case_when(
Nation == "Ireland" ~ "Republic of Ireland",
# Nation == "Ivory Coast" ~  "Côte d’Ivoire",
TRUE ~ Nation
)
)
myPal <- brewer.pal("GnBu", n=9)
footballersNats <- footballers %>%
mutate(Nation = case_when(
Nation %in% c("ENG", "SCO","NIR", "WAL") ~ "UK",
TRUE ~ Nation
)
) %>%
group_by(Nation) %>%
summarise(Count = n()) %>%
#Give full country names
rename(Nation_Code = Nation) %>%
left_join(fifaCodes, by="Nation_Code") %>%
mutate(Nation = case_when(
Nation_Code == "UK" ~ "UK",
TRUE ~ Nation
)
)
bordersNats <- borders$Nation %>% unique() %>% as.data.frame()
tmp2 <- footballers$Nation %>%
unique() %>%
as.data.frame()
#Get number of players by nationality
natData <- footballers %>%
mutate(Nation = case_when(
Nation %in% c("ENG", "SCO","NIR", "WAL") ~ "UK",
TRUE ~ Nation
)
) %>%
group_by(Nation) %>%
summarise(Count = n()) %>%
#Give full country names
rename(Nation_Code = Nation) %>%
left_join(fifaCodes, by="Nation_Code") %>%
mutate(Nation = case_when(
Nation_Code == "UK" ~ "UK",
Nation_Code == "COD" ~ "Democratic Republic of the Congo",
Nation_Code == "CGO" ~ "Republic of Congo",
Nation_Code == "KOR" ~ "South Korea",
TRUE ~ Nation
)
) %>%
full_join(borders, by = "Nation") %>%
left_join(popData, by = "Nation") %>%
filter(Nation != "Antarctica")
#Replace NA player count with 0
natData$Count[is.na(natData$Count)] <- 0
natData <- natData %>%
mutate(CountPer10M =  Count/Pop*10000000)
natDataNats <- natData$Nation %>%
unique() %>%
as.data.frame()
#Plot ggplot of just europe
europe_gg <- ggplot(natData, aes(x=long, y=lat, group = group, fill = Count)) +
geom_polygon() +
coord_fixed(xlim = c(-15,25),
ylim = c(35, 65))+
scale_fill_distiller(palette = "Blues", direction = 1) +
theme(
plot.background = element_rect(fill  = "white"),
panel.grid = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
# axis.text = element_blank()
)
europe_gg
#PLot with log scale
world_gg_log <- natData %>%
ggplot(aes(x=long, y=lat, group = group,
text = paste0('Country: ', Nation,
'<br>', 'Players Per 10 Million People: ', round(CountPer10M,2)),
# fill = Count/Pop*1000000+(0.01/1000000)
fill = CountPer10M
# fill = Count
)) +
geom_polygon() +
# coord_fixed(xlim = c(-15,40),
#             ylim = c(35, 65))+
# scale_fill_distiller(palette = "Blues", direction = 1) +
# scale_fill_gradientn(colours = myPal,
#                     trans = "log", breaks = c(0.1,1,7),
#                     name = "Players Per Million") +
scale_fill_viridis(option = "viridis",
breaks = c(0.001, 0.1, 10),
trans = scales::pseudo_log_trans(sigma = 0.001),
name = paste0("Players Per",
"\n",
"10M Pop"),
labels = scales::scientific)+
ggtitle("Where Are Footballers in the Top 5 Leagues From?",
# subtitle = "\n"
) +
theme(
plot.background = element_rect(fill  = "#EFEFEF"),
panel.background = element_rect(fill  = "#EFEFEF"),
# legend.position = c(0.177,1.03),
# legend.direction = "horizontal",
# legend.margin = margin(0),
legend.background = element_rect(fill  = "#EFEFEF"),
# legend.position = "bottom",
panel.grid = element_blank(),
# panel.background = element_rect(fill  = lighten("#757780",0.8)),
axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_blank()
)
world_gg_log
world_plotly_log <- ggplotly(world_gg_log, tooltip = "text")
world_plotly_log
#No messages and warnings in HTML output
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = FALSE,
fig.width = 9, fig.height = 7)
=======
labels = scales::comma)+
labs(title = "Number of Players in the Top Five Leagues as a Share of Population",
caption = myCaption
) +
theme_minimal() +
theme(
plot.background = element_rect(fill  = "#EFEFEF", color = "#EFEFEF"),
panel.background = element_rect(fill  = "#EFEFEF", color = "#EFEFEF"),
# legend.position = c(0.177,1.03),
# legend.direction = "horizontal",
# legend.margin = margin(0),
# legend.background = element_rect(fill  = "#EFEFEF"),
# legend.position = "bottom",
panel.grid = element_blank(),
axis.ticks = element_blank(),
plot.title.position = "plot",
plot.caption.position = "plot",
plot.title = ggtext::element_textbox_simple(color = dark_text,
family = "Cabin",
size = 24,
margin = margin(6, 6, 15, 6)
),
plot.subtitle = ggtext::element_textbox_simple(color = light_text,
family = "Cabin",
size = 12,
margin = margin(0,6,15,6)),
axis.title = element_blank(),
axis.text = element_blank(),
plot.caption = element_text(color = light_text,
family = "Cabin",
size = 9,
margin = margin(8,6,4,6),
hjust = c(0,1)), #One in bottom-left, one in bottom-right
legend.text = element_text(color = light_text,
family = "Cabin",
size = 10,
margin = margin(0,0,4,0)),
)
# world_gg_log
girafe(ggobj = world_gg_log) %>%
girafe_options(opts_zoom(max = 10))
#carathompson.com/talks/nhsr2022-ggplot-themes/
#Slice not working
mostPlayers <- natData %>%
group_by(Nation) %>%
slice_sample(n=1) %>% #Keep just one row per country
select(Count, CountPer10M, Nation, Pop) %>%
ungroup()
mostPlayers$tooltip <- c(paste0("Country: ", mostPlayers$Nation,
"\n Players Per 10 Million People: ", round(mostPlayers$CountPer10M,1),
"\n Total Players: ", mostPlayers$Count,
"\n Population: ", scales::comma(mostPlayers$Pop)))
test <- mostPlayers %>%
slice_max(CountPer10M, n=10) %>%
arrange(CountPer10M) %>%
{
ggplot(.,aes(x=reorder(Nation, desc(CountPer10M)), y=CountPer10M))+
geom_col_interactive(fill = viridis::viridis_pal()(5)[3],
tooltip = .$tooltip,
data_id = .$tooltip) +
geom_text(aes(label=round(CountPer10M,1), vjust = -0.25),
family = "Cabin", size = 4, color = light_text) +
labs(title = "Kicking Above Their Weight Class",
subtitle = "This plot shows the ten countries that have the greatest number of footballers in the top five leagues as a share of their population. While Croatia, Spain, and Uruguay clearly produce a disproportionaltley large share of the world's best footballers, countries like Grenada and Iceland are harder to draw conclusions about because their small populations put them in the top ten with just one or two players.",
caption = myCaption) +
ylab("Footballers in The Top Five Leagues Per 10 Million People") +
theme_minimal() +
theme(
plot.background = element_rect(fill  = "#EFEFEF", color = "#EFEFEF"),
panel.background = element_rect(fill  = "#EFEFEF", color = "#EFEFEF"),
# legend.position = c(0.177,1.03),
# legend.direction = "horizontal",
# legend.margin = margin(0),
# legend.background = element_rect(fill  = "#EFEFEF"),
# legend.position = "bottom",
panel.grid = element_blank(),
axis.ticks = element_blank(),
plot.title.position = "plot",
plot.caption.position = "plot",
plot.title = ggtext::element_textbox_simple(color = dark_text,
family = "Cabin",
size = 24,
margin = margin(6, 6, 15, 6)
),
plot.subtitle = ggtext::element_textbox_simple(color = light_text,
family = "Cabin",
size = 12,
margin = margin(0,6,15,6)),
axis.title.x = element_blank(),
axis.title.y = element_text(color = light_text,
family = "Cabin",
size = 12,
margin = margin(0,8,0,6)),
axis.text = element_text(color = light_text,
family = "Cabin",
size = 10,
margin = margin(0,0,4,0)),
plot.caption = element_text(color = light_text,
family = "Cabin",
size = 9,
margin = margin(8,0,4,6),
hjust = c(0,1))
)
}
girafe(ggobj = test)
>>>>>>> Footballer_Maps
#Clear memory
rm(list = ls(all = TRUE))
#Load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
<<<<<<< HEAD
janitor,        # data cleaning and tables
tidyverse,      # data management and visualization
knitr,          # print pretty results
plotly,         # interactive plots
worldfootballR, # Download FBref data
ggiraph,        # interactive ggplots
colorspace,     # lighten and darken text etc
ggrepel,        # repulsive text labels in plots
showtext        # custom fonts
# RColorBrewer, # color palettes
# wesanderson   # color palettes
=======
tidyverse,     # data management and visualization
systemfonts,   # use downloaded fonts
showtext,      # help with fonts
ggtext,        # Prettier titles etc
ggiraph,       # Interactive ggplots
here,          # relative file pathways
RColorBrewer,  # effective color palettes
colorspace,    # fancy work with colors like darken, lighten, & swatchplot
countrycode,   # iso codes and country names
viridis,       # better map colors
worldfootballR,# football statistics
feather        # light weight files
)
#Clear memory
rm(list = ls(all = TRUE))
#Load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse,     # data management and visualization
systemfonts,   # use downloaded fonts
showtext,      # help with fonts
ggtext,        # Prettier titles etc
ggiraph,       # Interactive ggplots
here,          # relative file pathways
RColorBrewer,  # effective color palettes
colorspace,    # fancy work with colors like darken, lighten, & swatchplot
countrycode,   # iso codes and country names
viridis,       # better map colors
worldfootballR,# football statistics
feather        # light weight files
)
# #Download basic player-level stats from FbRef for 2020-21 to 2022-23 seasons
# footballers <- fb_big5_advanced_season_stats(season_end_year= 2023, stat_type= "standard", team_or_player= "player")
# #Save downloaded data as feather file
# write_feather(footballers,
#               here("Europe_Borders/footballers.feather"))
#Load downloaded footballer data
footballers <- read_feather(here("Europe_Borders/footballers.feather"))
#Load coutnry abbreviations matched to names so we can get full names
fifaCodes <- read.csv(here("Europe_Borders/Fifa_Country_Codes.csv"))
#Load downloaded world population data (https://databank.worldbank.org/source/population-estimates-and-projections)
popData <- read.csv(here("Europe_Borders/WB_Population_2022.csv")) %>%
rename( "Nation" = "Country.Name") %>%
#Make some names match the names in the other datasets
mutate(Nation = case_when(
Nation == "United Kingdom" ~ "UK",
Nation == "United States" ~ "USA",
Nation == "Bosnia & Herzegovina" ~ "Bosnia and Herzegovina",
Nation == "Cote d'Ivoire" ~  "Ivory Coast",
Nation == "Czechia" ~ "Czech Republic",
Nation == "Ireland" ~ "Republic of Ireland",
Nation == "Congo, Dem. Rep." ~ "Democratic Republic of the Congo",
Nation == "Congo, Rep." ~ "Republic of Congo",
Nation == "Russian Federation" ~ "Russia",
Nation == "Yemen, Rep." ~ "Yemen",
Nation == "Egypt, Arab Rep." ~ "Egypt",
Nation == "Syrian Arab Republic" ~ "Syria",
Nation == "Turkiye" ~ "Turkey",
Nation == "Iran, Islamic Rep." ~ "Iran",
Nation == "Venezuela, RB" ~ "Venezuela",
Nation == "Slovak Republic" ~ "Slovakia",
Nation == "Kyrgyz Republic" ~ "Kyrgyzstan",
Nation == "Korea, Dem. People's Rep." ~ "North Korea",
Nation == "Korea, Rep." ~ "South Korea",
Nation == "Lao PDR" ~ "Laos",
TRUE ~ Nation
)
)
#Load country polygons
borders <- map_data("world") %>%
rename(Nation = region) %>%
mutate(Nation = case_when(
Nation == "Ireland" ~ "Republic of Ireland",
# Nation == "Ivory Coast" ~  "Côte d’Ivoire",
TRUE ~ Nation
)
)
footballersNats <- footballers %>%
mutate(Nation = case_when(
Nation %in% c("ENG", "SCO","NIR", "WAL") ~ "UK",
TRUE ~ Nation
)
) %>%
group_by(Nation) %>%
summarise(Count = n()) %>%
#Give full country names
rename(Nation_Code = Nation) %>%
left_join(fifaCodes, by="Nation_Code") %>%
mutate(Nation = case_when(
Nation_Code == "UK" ~ "UK",
TRUE ~ Nation
)
)
#For inspecting country names attached to polygons. e.g. UK vs United Kingdom
bordersNats <- borders$Nation %>% unique() %>% as.data.frame()
#For inspecting country names attached footballer data. e.g. UK vs United Kingdom
tmp2 <- footballers$Nation %>%
unique() %>%
as.data.frame()
#Add Cabin font family
font_add(family = "Cabin",
regular = "C:/USERS/GVAND/APPDATA/LOCAL/MICROSOFT/WINDOWS/FONTS/Cabin-VariableFont_wdth,wght.ttf")
showtext_auto()
#Text colors for use in plots
light_text <- "grey30"
dark_text <- "#0a0903"
#Save Caption for plots
myCaption <- c("Data Source: FBref.com 2022-23 Season Standard Statistics & World Bank 2022 Population Estimates",
"Created by Gregory Vander Vinne")
View(popData)
#No messages and warnings in HTML output
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = FALSE,
fig.width = 10, fig.height = 6)
##### Setup #####
#Clear memory
rm(list = ls(all = TRUE))
#Load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse,     # data management and visualization
ggtext,        # Fancy Annotations using HTML etc
ggside,        # Density plots in margins of ggplots
ggrepel,       # repulsive text annotations
showtext,      # help with downloaded fonts
systemfonts,   # use downloaded fonts
colorspace,    # lighten and darken colors etc
worldfootballR # football statistics
>>>>>>> Footballer_Maps
)
#Download advanced GK stats from FbRef for 2020-21 to 2022-23 seasons
myData <- fb_big5_advanced_season_stats(season_end_year= c(2021:2023), stat_type= "keepers_adv", team_or_player= "player")
#Download basic GK stats from FbRef for 2020-21 to 2022-23 seasons
kprs_bas <- fb_big5_advanced_season_stats(season_end_year= c(2021:2023), stat_type= "keepers", team_or_player= "player") %>%
select(Player, Season_End_Year, Min_Playing) #I only acutally need minutes played from this
#Join the two datasets
myData <- full_join(myData, kprs_bas, by=c("Player","Season_End_Year"))
#Add Roboto font family
font_add(family = "Roboto",
regular = "C:/USERS/GVAND/APPDATA/LOCAL/MICROSOFT/WINDOWS/FONTS/ROBOTO-REGULAR.ttf",
bold = "C:/USERS/GVAND/APPDATA/LOCAL/MICROSOFT/WINDOWS/FONTS/ROBOTO-BOLD.ttf")
showtext_auto()
#Palette for plotting
myPal <- c(
myBlue = '#095786',
myRed ="#ae0000",
myBeige = lighten("#e6cea0", 0.65),
dark_text = "#0a0903",
light_text = "grey30"
)
#Tiny bit of cleaning
myData <- myData %>%
rename(OPA = "#OPA_Sweeper",
OPA_90 = "#OPA_per_90_Sweeper",
AvgDist = "AvgDist_Sweeper") %>%
mutate(Year = case_when(
Season_End_Year == 2021 ~ "2020-21",
Season_End_Year == 2022 ~ "2021-22",
Season_End_Year == 2023 ~ "2022-23"
),
Year = factor(Year, levels = c("2022-23","2021-22","2020-21")) # for ordering in plot
)
<<<<<<< HEAD
)
#Combined data for past three seasons
aggData <- myData %>%
group_by(Name) %>%
select(Name, Squad, Matches, OPA, AvgDist, PSxG_Abv, PSxG, Lchs, Cmp, Opp, Stp, Age, Age_Category) %>%
mutate(Seasons = 1,                       #To be summed in next line to get number of seasons in data
Age=as.character(Age)) %>%         #So that it does not get summed
mutate_if(is.numeric, sum) %>%            #Sum all numeric variables to get total over past three seasons
filter(Seasons > 1, Matches >= 38) %>%    #Must have played in at least two of the last three seasons & a total of at least 38 matches
mutate(Age = as.numeric(Age),             #Turn age back into numeric
AvgDist = AvgDist/Seasons) %>%     #Average distance has to be simple average due to data available
slice_max(Age)                            #Take just one row per player with current age
curData <- myData %>%
filter(Year=="2022-23", Matches >= 15)
View(kprs_adv)
=======
##### Bar Plot #####
#Aggregate Data
barPlotData <- myData %>%
filter(Comp %in% c("Serie A", "Bundesliga")) %>%
group_by(Comp, Year) %>%
summarise(OPA_90 = (sum(OPA, na.rm = TRUE)/sum(Min_Playing, na.rm = TRUE))*90) %>%
ungroup()
#Plot
barPlotData %>%
ggplot(aes(x = Year, y = OPA_90, fill=Comp)) +
geom_bar(stat = "identity", position = "dodge", colour = myPal["myBeige"], aes(alpha=Year)) +
coord_flip() +
scale_alpha_manual(values = c(1,0.8,0.6)) +
scale_fill_manual(values = c("#095786","#ae0000"))+  #scale fill argument glitching when feeding palette values
scale_color_manual(values = c("#095786","#ae0000"))+
facet_wrap(Comp ~ ., ncol = 1) +
labs(y = "Goalkeeper Actions Outside of Penalty Area Per 90 Minutes",
title = paste0("<span style='color:",
myPal["myBlue"], "'>Bundesliga</span>
Keepers Play The Ball Outside of Their Pentalty Area
More Often Than <span style='color:",
myPal["myRed"], "'>Serie A</span> Keepers"),
caption = "Data Source: FBref.com") +
geom_richtext(aes(label= format(round(OPA_90,2), nsmall=2)), #format w/ nsmall keeps trailing zeros
hjust=1,
color=myPal["myBeige"],
fill=NA,
label.colour=NA,
family="Roboto",
fontface = "bold",
size = 8,
)+
theme(legend.position = "none",
plot.title.position = "plot",
axis.title.y = element_blank(),
axis.title.x = element_text(face = "bold",
color = myPal["light_text"],
size = 24),
axis.ticks = element_blank(),
axis.text = element_text(color=myPal["light_text"], size=18),
text = element_text(family = "Roboto", colour = myPal[3]),
plot.caption = element_text(family = "Roboto", colour = myPal["light_text"],
hjust = -0.065, size = 20),
plot.title = ggtext::element_textbox_simple(family = "Roboto",
size = 32,
face = "bold",
halign = 0, colour = myPal["dark_text"]),
strip.text = element_text(family = "Roboto",
hjust = 0.05,
face = "bold",
size = 24,
colour = myPal["light_text"]),
plot.background = element_rect(fill  = myPal["myBeige"]),
panel.grid = element_blank(),
panel.background = element_blank(),
strip.background = element_blank())
#### Scatter Plot ####
# Wrangle Data
sctrPlotData <- myData %>%
filter(Comp %in% c("Serie A", "Bundesliga"),
Min_Playing >= 900) %>%
select(Player, Year, Comp, OPA_90, AvgDist, Min_Playing)
# Plot
sctrPlotData %>%
ggplot(aes(x = AvgDist, y = OPA_90, color=Comp,fill = Comp, shape=Comp)) +
geom_point(alpha = 0.8) +
geom_text_repel(aes(label =
case_when(OPA_90 > 3 ~ paste0(strsplit(Player,"\\s+") %>% sapply(`[`, 2),
", " ,
Year),
TRUE ~ ""),
),
show.legend = FALSE, size = 6, family = "Roboto", alpha = 0.8) +
geom_xsidedensity(aes(y=after_stat(density)), alpha = 0.5, show.legend = FALSE) +
geom_ysidedensity(aes(x=after_stat(density)), alpha = 0.5, show.legend = FALSE) +
scale_xsidey_continuous(breaks = NULL) +
scale_ysidex_continuous(breaks = NULL) +
scale_color_manual(values = c("#095786","#ae0000"),
name= "") +
scale_fill_manual(values = c("#095786","#ae0000"),
name= "") +
scale_shape_manual(values=c(15,16),
name="") +
labs(y = "Actions Outside of Penalty Area Per 90 Minutes",
x = "Average Distance From Goal of All Defensive Actions (Yards)",
title = paste0("<span style='color:",
myPal["myBlue"], "'>Bundesliga</span>
Keepers Do More 'Sweeper Keeping'
Than <span style='color:",
myPal["myRed"], "'>Serie A</span> Keepers"),
caption = c("Data Source: FBref.com", #Bottom-left caption
"2020-21 to 2022-23, Minimum 900 minutes each season" )) + #Bottom-right caption
guides(fill = "none") + #exclude fill aestethic from legend
theme(legend.position = "top",
# legend.position = c(0.055,1.065),
# legend.direction = "horizontal",
# legend.margin = margin(0),
legend.background = element_rect(fill =myPal["myBeige"]),
legend.key = element_blank(), #remove grey behind each point
legend.text = element_text(color = myPal["light_text"], size = 22),
plot.title.position = "plot",
axis.title.y = element_text(face = "bold",
color = myPal["light_text"],
size = 24),
axis.title.x = element_text(face = "bold",
color = myPal["light_text"],
size = 24),
# axis.ticks = element_line(color=myPal["light_text"]),
axis.ticks = element_blank(),
axis.text = element_text(color=myPal["light_text"], size=18),
axis.line = element_line(color=myPal["light_text"]),
# axis.line = element_blank(),
text = element_text(family = "Roboto", colour = myPal[3]),
plot.caption = element_text(family = "Roboto", colour = myPal["light_text"],
hjust = c(-0.04,1), size = c(20,20)), #Allows captions in bottom right and bottom left
plot.title = ggtext::element_textbox_simple(family = "Roboto",
size = 32,
face = "bold",
halign = 0, colour = myPal["dark_text"]),
plot.background = element_rect(fill  = myPal["myBeige"]),
panel.grid = element_blank(),
panel.background = element_blank())
#No messages and warnings in HTML output
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = FALSE,
fig.width = 10, fig.height = 7)
#Clear memory
rm(list = ls(all = TRUE))
#Load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse,     # data management and visualization
systemfonts,   # use downloaded fonts
showtext,      # help with fonts
ggtext,        # Prettier titles etc
ggiraph,       # Interactive ggplots
here,          # relative file pathways
RColorBrewer,  # effective color palettes
colorspace,    # fancy work with colors like darken, lighten, & swatchplot
countrycode,   # iso codes and country names
viridis,       # better map colors
worldfootballR,# football statistics
feather        # light weight files
)
# #Download basic player-level stats from FbRef for 2020-21 to 2022-23 seasons
# footballers <- fb_big5_advanced_season_stats(season_end_year= 2024, stat_type= "standard", team_or_player= "player")
# #Save downloaded data as feather file
# write_feather(footballers,
#               here("Europe_Borders/footballers.feather"))
#Load downloaded footballer data
footballers <- read_feather(here("Europe_Borders/footballers.feather"))
#Load coutnry abbreviations matched to names so we can get full names
fifaCodes <- read.csv(here("Europe_Borders/Fifa_Country_Codes.csv"))
#Load downloaded world population data (https://databank.worldbank.org/source/population-estimates-and-projections)
popData <- read.csv(here("Europe_Borders/WB_Population_2022.csv")) %>%
rename( "Nation" = "Country.Name") %>%
#Make some names match the names in the other datasets
mutate(Nation = case_when(
Nation == "United Kingdom" ~ "UK",
Nation == "United States" ~ "USA",
Nation == "Bosnia & Herzegovina" ~ "Bosnia and Herzegovina",
Nation == "Cote d'Ivoire" ~  "Ivory Coast",
Nation == "Czechia" ~ "Czech Republic",
Nation == "Ireland" ~ "Republic of Ireland",
Nation == "Congo, Dem. Rep." ~ "Democratic Republic of the Congo",
Nation == "Congo, Rep." ~ "Republic of Congo",
Nation == "Russian Federation" ~ "Russia",
Nation == "Yemen, Rep." ~ "Yemen",
Nation == "Egypt, Arab Rep." ~ "Egypt",
Nation == "Syrian Arab Republic" ~ "Syria",
Nation == "Turkiye" ~ "Turkey",
Nation == "Iran, Islamic Rep." ~ "Iran",
Nation == "Venezuela, RB" ~ "Venezuela",
Nation == "Slovak Republic" ~ "Slovakia",
Nation == "Kyrgyz Republic" ~ "Kyrgyzstan",
Nation == "Korea, Dem. People's Rep." ~ "North Korea",
Nation == "Korea, Rep." ~ "South Korea",
Nation == "Lao PDR" ~ "Laos",
Nation == "Gambia, The" ~ "Gambia",
TRUE ~ Nation
)
)
#Load country polygons
borders <- map_data("world") %>%
rename(Nation = region) %>%
mutate(Nation = case_when(
Nation == "Ireland" ~ "Republic of Ireland",
# Nation == "Ivory Coast" ~  "Côte d’Ivoire",
TRUE ~ Nation
)
)
footballersNats <- footballers %>%
mutate(Nation = case_when(
Nation %in% c("ENG", "SCO","NIR", "WAL") ~ "UK",
TRUE ~ Nation
)
) %>%
group_by(Nation) %>%
summarise(Count = n()) %>%
#Give full country names
rename(Nation_Code = Nation) %>%
left_join(fifaCodes, by="Nation_Code") %>%
mutate(Nation = case_when(
Nation_Code == "UK" ~ "UK",
TRUE ~ Nation
)
)
#For inspecting country names attached to polygons. e.g. UK vs United Kingdom
bordersNats <- borders$Nation %>% unique() %>% as.data.frame()
#For inspecting country names attached footballer data. e.g. UK vs United Kingdom
tmp2 <- footballers$Nation %>%
unique() %>%
as.data.frame()
#Add Cabin font family
font_add(family = "Cabin",
regular = "C:/USERS/GVAND/APPDATA/LOCAL/MICROSOFT/WINDOWS/FONTS/Cabin-VariableFont_wdth,wght.ttf")
showtext_auto()
#Text colors for use in plots
light_text <- "grey30"
dark_text <- "#0a0903"
#Save Caption for plots
myCaption <- c("Data Source: FBref.com 2022-23 Season Standard Statistics & World Bank 2022 Population Estimates",
"Created by Gregory Vander Vinne")
View(footballers)
# #Download basic player-level stats from FbRef for 2020-21 to 2022-23 seasons
footballers <- fb_big5_advanced_season_stats(season_end_year= 2024, stat_type= "standard", team_or_player= "player")
>>>>>>> Footballer_Maps
